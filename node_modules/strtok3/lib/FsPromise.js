"use strict";
/**
 * Module convert fs functions to promise based functions
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const fs = require("fs");
exports.pathExists = fs.existsSync;
exports.createReadStream = fs.createReadStream;
function stat(path) {
    return __awaiter(this, void 0, void 0, function* () {
        return new Promise((resolve, reject) => {
            fs.stat(path, (err, stats) => {
                if (err)
                    reject(err);
                else
                    resolve(stats);
            });
        });
    });
}
exports.stat = stat;
function close(fd) {
    return __awaiter(this, void 0, void 0, function* () {
        return new Promise((resolve, reject) => {
            fs.close(fd, err => {
                if (err)
                    reject(err);
                else
                    resolve();
            });
        });
    });
}
exports.close = close;
function open(path, mode) {
    return __awaiter(this, void 0, void 0, function* () {
        return new Promise((resolve, reject) => {
            fs.open(path, mode, (err, fd) => {
                if (err)
                    reject(err);
                else
                    resolve(fd);
            });
        });
    });
}
exports.open = open;
function read(fd, buffer, offset, length, position) {
    return __awaiter(this, void 0, void 0, function* () {
        return new Promise((resolve, reject) => {
            fs.read(fd, buffer, offset, length, position, (err, bytesRead, _buffer) => {
                if (err)
                    reject(err);
                else
                    resolve({ bytesRead, buffer: _buffer });
            });
        });
    });
}
exports.read = read;
function writeFile(path, data) {
    return __awaiter(this, void 0, void 0, function* () {
        return new Promise((resolve, reject) => {
            fs.writeFile(path, data, err => {
                if (err)
                    reject(err);
                else
                    resolve();
            });
        });
    });
}
exports.writeFile = writeFile;
function writeFileSync(path, data) {
    fs.writeFileSync(path, data);
}
exports.writeFileSync = writeFileSync;
function readFile(path) {
    return __awaiter(this, void 0, void 0, function* () {
        return new Promise((resolve, reject) => {
            fs.readFile(path, (err, buffer) => {
                if (err)
                    reject(err);
                else
                    resolve(buffer);
            });
        });
    });
}
exports.readFile = readFile;
