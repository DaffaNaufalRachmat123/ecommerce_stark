/// <reference types="node" />
import { IGetToken, IToken } from 'token-types';
import { ITokenizer } from './type';
export declare abstract class AbstractTokenizer implements ITokenizer {
    fileSize?: number;
    position: number;
    private numBuffer;
    /**
     * Read buffer from tokenizer
     * @param buffer
     * @param offset is the offset in the buffer to start writing at; if not provided, start at 0
     * @param length is an integer specifying the number of bytes to read
     * @param position is an integer specifying where to begin reading from in the file. If position is null, data will be read from the current file position.
     * @param maybeless If set, will not throw an EOF error if the less then the requested length could be read
     * @returns {Promise<number>}
     */
    abstract readBuffer(buffer: Buffer | Uint8Array, offset?: number, length?: number, position?: number, maybeless?: boolean): Promise<number>;
    /**
     * Peek (read ahead) buffer from tokenizer
     * @param buffer
     * @param offset is the offset in the buffer to start writing at; if not provided, start at 0
     * @param length is an integer specifying the number of bytes to read
     * @param position is an integer specifying where to begin reading from in the file. If position is null, data will be read from the current file position.
     * @param maybeless If set, will not throw an EOF error if the less then the requested length could be read
     * @returns {Promise<number>}
     */
    abstract peekBuffer(buffer: Buffer | Uint8Array, offset?: number, length?: number, position?: number, maybeless?: boolean): Promise<number>;
    readToken<T>(token: IGetToken<T>, position?: number | null, maybeless?: boolean): Promise<T>;
    peekToken<T>(token: IGetToken<T>, position?: number, maybeless?: boolean): Promise<T>;
    readNumber(token: IToken<number>): Promise<number>;
    peekNumber(token: IToken<number>): Promise<number>;
    /**
     * @return actual number of bytes ignored
     */
    abstract ignore(length: number): Promise<number>;
    close(): Promise<void>;
}
