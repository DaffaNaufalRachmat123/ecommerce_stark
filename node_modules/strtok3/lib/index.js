"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const FileTokenizer_1 = require("./FileTokenizer");
const fs = require("./FsPromise");
const ReadStreamTokenizer_1 = require("./ReadStreamTokenizer");
const core = require("./core");
/**
 * Construct ReadStreamTokenizer from given file path.
 * @param filePath
 * @returns {Promise<FileTokenizer>}
 */
function fromFile(filePath) {
    return __awaiter(this, void 0, void 0, function* () {
        if (fs.pathExists(filePath)) {
            const stat = yield fs.stat(filePath);
            const fd = yield fs.open(filePath, "r");
            return new FileTokenizer_1.FileTokenizer(fd, stat.size);
        }
        else {
            throw new Error(`File not found: ${filePath}`);
        }
    });
}
exports.fromFile = fromFile;
/**
 * Construct ReadStreamTokenizer from given Stream.
 * Will set fileSize, if provided given Stream has set the .path property.
 * @param stream Stream.Readable
 * @returns {Promise<ReadStreamTokenizer>}
 */
function fromStream(stream) {
    return __awaiter(this, void 0, void 0, function* () {
        if (stream.path) {
            const stat = yield fs.stat(stream.path);
            return core.fromStream(stream, stat.size);
        }
        return new ReadStreamTokenizer_1.ReadStreamTokenizer(stream);
    });
}
exports.fromStream = fromStream;
/**
 * Construct ReadStreamTokenizer from given Buffer.
 * @param buffer Buffer to tokenize
 * @returns BufferTokenizer
 */
exports.fromBuffer = core.fromBuffer;
